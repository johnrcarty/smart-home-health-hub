"""add_care_task_categories

Revision ID: ce9b27dfa0a0
Revises: 7613470f16fb
Create Date: 2025-08-10 02:00:04.640204

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ce9b27dfa0a0'
down_revision: Union[str, None] = '7613470f16fb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create the care_task_category table first
    op.create_table('care_task_category',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    
    # Insert default categories
    from datetime import datetime
    now = datetime.utcnow()
    
    # Create a temporary connection to insert default categories
    connection = op.get_bind()
    
    # Insert default categories
    default_categories = [
        {'name': 'nutrition', 'description': 'Nutrition-related care tasks', 'is_default': True},
        {'name': 'bathroom', 'description': 'Bathroom and hygiene care tasks', 'is_default': True},
        {'name': 'vitals', 'description': 'Vital signs and monitoring tasks', 'is_default': True},
        {'name': 'therapy', 'description': 'Therapy and rehabilitation tasks', 'is_default': True},
    ]
    
    for category in default_categories:
        connection.execute(sa.text("""
            INSERT INTO care_task_category (name, description, is_default, active, created_at, updated_at)
            VALUES (:name, :description, :is_default, true, :created_at, :updated_at)
        """), {
            'name': category['name'],
            'description': category['description'],
            'is_default': category['is_default'],
            'created_at': now,
            'updated_at': now
        })
    
    # Add the category_id column to care_task
    op.add_column('care_task', sa.Column('category_id', sa.Integer(), nullable=True))
    
    # Migrate existing group data to categories
    # First, create categories for any existing unique group values that aren't defaults
    existing_groups = connection.execute(sa.text("""
        SELECT DISTINCT "group" FROM care_task 
        WHERE "group" IS NOT NULL 
        AND "group" NOT IN ('nutrition', 'bathroom', 'vitals', 'therapy')
    """)).fetchall()
    
    for group_row in existing_groups:
        group_name = group_row[0]
        if group_name:  # Skip empty strings
            connection.execute(sa.text("""
                INSERT INTO care_task_category (name, description, is_default, active, created_at, updated_at)
                VALUES (:name, :description, false, true, :created_at, :updated_at)
                ON CONFLICT (name) DO NOTHING
            """), {
                'name': group_name,
                'description': f'Migrated category: {group_name}',
                'created_at': now,
                'updated_at': now
            })
    
    # Update care_task records to use category_id instead of group
    connection.execute(sa.text("""
        UPDATE care_task 
        SET category_id = (
            SELECT id FROM care_task_category 
            WHERE care_task_category.name = care_task."group"
        )
        WHERE care_task."group" IS NOT NULL
    """))
    
    # Create the foreign key constraint
    op.create_foreign_key(None, 'care_task', 'care_task_category', ['category_id'], ['id'])
    
    # Drop the old group column
    op.drop_column('care_task', 'group')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('care_task', sa.Column('group', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'care_task', type_='foreignkey')
    op.drop_column('care_task', 'category_id')
    op.drop_table('care_task_category')
    # ### end Alembic commands ###
